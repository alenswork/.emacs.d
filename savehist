;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(query-replace-history query-replace-from-to-history yes-or-no-p-history bookmark-history helm-M-x-input-history minibuffer-history extended-command-history file-name-history))
(setq query-replace-history '("/Org" "/OrgMode"))
(setq yes-or-no-p-history '("yes"))
(setq helm-M-x-input-history '("list-pac"))
(setq minibuffer-history '("/home/alen/.emacs.d/config/Config-whichkey.el" "/home/alen/.emacs.d/config/or" "/home/alen/.emacs.d/lisp/" "/home/alen/OrgMode/mygtd.org" "/home/alen/.emacs.d/config/" "/home/alen/.emacs.d/config/Config-avy.el" "Config-helm.el" "Config-org.el" "startup.el" "Config-ibuffer.el" "Config-winner_mode.el" "Config-acewindow.el" "/home/alen/.emacs.d/config/Config-acewindow.el" #("default" 0 7 (fontified t face font-lock-comment-face)) "/home/alen/.emacs.d/config/Config-winner_mode.el" "/home/alen/.emacs.d/config/Config-ibuffer.el" "config-org.el" "/home/alen/OneDrive/Projects/Emacs_Config-Dotemcs/config/org" "/home/alen/.emacs.d/config/Config-org.el" "/home/alen/Downloads/Emcas-24.4-master/" "Init file" "/home/alen/.emacs.d/ini" "/home/alen/.emacs.d/init.el" "core-boot.el" "init.el<Emacs_Config-Dotemcs>" "/home/alen/OneDrive/Projects/Emacs_Config-Dotemcs/" "/home/alen/OneDrive/Projects/Emacs_Config-Dotemcs/core/" "/home/alen/.emacs.d/config/003-pagebreaklines.el" "/home/alen/.emacs.d/config/003-dashboard.el" "helm-descbinds" "helm"))
(setq extended-command-history '(#("list-packages" 0 13 (match-part "list-packages")) "package-install"))
(setq file-name-history '("~/.emacs.d/config/Config-org.el" "~/.emacs.d/lisp/startup.el" "~/.emacs.d/config/Config-acewindow.el" "~/OneDrive/Projects/Emacs_Config-Dotemcs/config/config-org.el" "~/Downloads/Emcas-24.4-master/myinit.org" "~/.emacs.d/init.el" "~/.emacs.d/config/Config-helm.el" "~/OneDrive/Projects/Emacs_Config-Dotemcs/init.el" "~/OneDrive/Projects/Emacs_Config-Dotemcs/core/core-boot.el" "~/.emacs.d/config/001-try.el" "~/.emacs.d/config/002-helm.el"))
(setq kill-ring '("(use-package which-key
	:ensure t 
	:config
	(which-key-mode))" #("/OrgMode" 0 8 (fontified t face font-lock-string-face)) "(global-set-key (kbd \"C-c c\")
       'org-capture)" "(use-package ox-reveal
:ensure ox-reveal)

(setq org-reveal-root \"http://cdn.jsdelivr.net/reveal.js/3.0.0/\")
(setq org-reveal-mathjax t)

(use-package htmlize
:ensure t)" "(setq org-export-babel-evaluate nil)" "(setq org-src-fontify-natively t)
(setq org-src-tab-acts-natively t)" "(org-babel-do-load-languages
 'org-babel-load-languages
 '(
   (emacs-lisp . t)
   (org . t)
   (sh . t)
   (C . t)
   (python . t)
   (gnuplot . t)
   (octave . t)
   (R . t)
   (dot . t)
   (awk . t)
   ))" "(setq org-use-speed-commands t)" "(defalias 'yes-or-no-p 'y-or-n-p)" "(setq org-todo-keywords
      '(
        (sequence \"IDEA(i)\" \"TODO(t)\" \"STARTED(s)\" \"NEXT(n)\" \"WAITING(w)\" \"|\" \"DONE(d)\")
        (sequence \"|\" \"CANCELED(c)\" \"DELEGATED(l)\" \"SOMEDAY(f)\")
        ))

(setq org-todo-keyword-faces
      '((\"IDEA\" . (:foreground \"GoldenRod\" :weight bold))
        (\"NEXT\" . (:foreground \"IndianRed1\" :weight bold))   
        (\"STARTED\" . (:foreground \"OrangeRed\" :weight bold))
        (\"WAITING\" . (:foreground \"coral\" :weight bold)) 
        (\"CANCELED\" . (:foreground \"LimeGreen\" :weight bold))
        (\"DELEGATED\" . (:foreground \"LimeGreen\" :weight bold))
        (\"SOMEDAY\" . (:foreground \"LimeGreen\" :weight bold))
        ))

(setq org-tag-persistent-alist 
      '((:startgroup . nil)
        (\"HOME\" . ?h) 
        (\"RESEARCH\" . ?r)
        (\"TEACHING\" . ?t)
        (:endgroup . nil)
        (:startgroup . nil)
        (\"OS\" . ?o) 
        (\"DEV\" . ?d)
        (\"WWW\" . ?w)
        (:endgroup . nil)
        (:startgroup . nil)
        (\"EASY\" . ?e)
        (\"MEDIUM\" . ?m)
        (\"HARD\" . ?a)
        (:endgroup . nil)
        (\"URGENT\" . ?u)
        (\"KEY\" . ?k)
        (\"BONUS\" . ?b)
        (\"noexport\" . ?x)  
        )
      )

(setq org-tag-faces
      '(
        (\"HOME\" . (:foreground \"GoldenRod\" :weight bold))
        (\"RESEARCH\" . (:foreground \"GoldenRod\" :weight bold))
        (\"TEACHING\" . (:foreground \"GoldenRod\" :weight bold))
        (\"OS\" . (:foreground \"IndianRed1\" :weight bold))   
        (\"DEV\" . (:foreground \"IndianRed1\" :weight bold))   
        (\"WWW\" . (:foreground \"IndianRed1\" :weight bold))
        (\"URGENT\" . (:foreground \"Red\" :weight bold))  
        (\"KEY\" . (:foreground \"Red\" :weight bold))  
        (\"EASY\" . (:foreground \"OrangeRed\" :weight bold))  
        (\"MEDIUM\" . (:foreground \"OrangeRed\" :weight bold))  
        (\"HARD\" . (:foreground \"OrangeRed\" :weight bold))  
        (\"BONUS\" . (:foreground \"GoldenRod\" :weight bold))
        (\"noexport\" . (:foreground \"LimeGreen\" :weight bold))  
        )
)" "(setq org-default-notes-file (concat org-directory \"/mygtd.org\"))" "(setq org-directory (expand-file-name \"~/org\"))" "(provide 'emacs-orgmode-config)
(require 'ox)  

(add-to-list 'auto-mode-alist '(\"\\\\.org$\" . org-mode))

(define-key global-map \"\\C-cl\" 'org-store-link)
(define-key global-map \"\\C-ca\" 'org-agenda)

(setq org-log-done t)
(setq org-fast-tag-selection-single-key t)
(setq org-use-fast-todo-selection t)
(setq org-startup-truncated nil)" "(use-package avy
  :ensure t
  :bind (\"M-s\" . avy-goto-char))" "(setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))" "(use-package ace-window
  :ensure t
  :init
  (progn
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0))))) 
    ))
" "(winner-mode 1)" "(defalias 'list-buffers 'ibuffer) ; make ibuffer default" #("        ;; Custom themes:
        (add-to-list 'custom-theme-load-path \"~/.emacs.d/themes\")
        ;;  (load-theme 'odersky t)
        (load-theme 'spolsky t)
         ;;(load-theme '<name> t)
" 0 8 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 8 11 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 11 26 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 26 71 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 71 90 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 90 100 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 100 104 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 104 128 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 128 169 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 169 171 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 171 194 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face org-block))) "(recentf-mode 1)
(setq recentf-max-menu-items 25)
(global-set-key \"\\C-x\\ \\C-r\" 'recentf-open-files)" "page-break-lines" "global-page-break-lines-mode" #("(use-package try
	:ensure t)
" 0 1 (fontified t) 1 12 (face font-lock-keyword-face fontified t) 12 13 (fontified t) 13 16 (face font-lock-constant-face fontified t) 16 18 (fontified t) 18 25 (face font-lock-builtin-face fontified t) 25 29 (fontified t)) "(setq initial-buffer-choice (lambda () (get-buffer \"*dashboard*\")))" "(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook))" "(use-package helm-descbinds
  :defer t
  :bind ((\"C-h b\" . helm-descbinds)
         (\"C-h w\" . helm-descbinds)))" "(use-package helm
  :diminish helm-mode
  :init
  (progn
    (require 'helm-config)
    (setq helm-candidate-number-limit 100)
    ;; From https://gist.github.com/antifuchs/9238468
    (setq helm-idle-delay 0.0 ; update fast sources immediately (doesn't).
          helm-input-idle-delay 0.01  ; this actually updates things
                                        ; reeeelatively quickly.
          helm-yas-display-key-on-candidate t
          helm-quick-update t
          helm-M-x-requires-pattern nil
          helm-ff-skip-boring-files t)
    (helm-mode))
  :bind ((\"C-c h\" . helm-mini)
         (\"C-h a\" . helm-apropos)
         (\"C-x C-b\" . helm-buffers-list)
         (\"C-x b\" . helm-buffers-list)
         (\"M-y\" . helm-show-kill-ring)
         (\"M-x\" . helm-M-x)
         (\"C-x c o\" . helm-occur)
         (\"C-x c s\" . helm-swoop)
         (\"C-x c y\" . helm-yas-complete)
         (\"C-x c Y\" . helm-yas-create-snippet-on-region)
         (\"C-x c b\" . my/helm-do-grep-book-notes)
         (\"C-x c SPC\" . helm-all-mark-rings)))
(ido-mode -1) ;; Turn off ido mode in case I enabled it accidentally"))
(setq search-ring '("ox-re" "pa"))
(setq regexp-search-ring 'nil)
