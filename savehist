;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(bookmark-history helm-M-x-input-history minibuffer-history extended-command-history file-name-history))
(setq minibuffer-history '("/home/alen/Downloads/Emcas-24.4-master/" "Init file" "/home/alen/.emacs.d/ini" "/home/alen/.emacs.d/config/" "/home/alen/.emacs.d/lisp/" "/home/alen/.emacs.d/init.el" "core-boot.el" "init.el<Emacs_Config-Dotemcs>" "/home/alen/OneDrive/Projects/Emacs_Config-Dotemcs/" "/home/alen/OneDrive/Projects/Emacs_Config-Dotemcs/core/" "/home/alen/.emacs.d/config/003-pagebreaklines.el" "/home/alen/.emacs.d/config/003-dashboard.el" "helm-descbinds" "helm"))
(setq extended-command-history '("package-install"))
(setq file-name-history '("~/Downloads/Emcas-24.4-master/myinit.org" "~/.emacs.d/init.el" "~/.emacs.d/config/Config-helm.el" "~/.emacs.d/lisp/startup.el" "~/OneDrive/Projects/Emacs_Config-Dotemcs/init.el" "~/OneDrive/Projects/Emacs_Config-Dotemcs/core/core-boot.el" "~/.emacs.d/config/001-try.el" "~/.emacs.d/config/002-helm.el"))
(setq kill-ring '(#("        ;; Custom themes:
        (add-to-list 'custom-theme-load-path \"~/.emacs.d/themes\")
        ;;  (load-theme 'odersky t)
        (load-theme 'spolsky t)
         ;;(load-theme '<name> t)
" 0 8 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 8 11 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 11 26 (face (font-lock-comment-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 26 71 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 71 90 (face (font-lock-string-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 90 100 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 100 104 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 104 128 (face (font-lock-comment-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 128 169 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 169 171 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 171 194 (face (font-lock-comment-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t)) "(recentf-mode 1)
(setq recentf-max-menu-items 25)
(global-set-key \"\\C-x\\ \\C-r\" 'recentf-open-files)" "page-break-lines" "global-page-break-lines-mode" #("(use-package try
	:ensure t)
" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 16 (fontified t face font-lock-constant-face) 16 18 (fontified t) 18 25 (fontified t face font-lock-builtin-face) 25 29 (fontified t)) "(setq initial-buffer-choice (lambda () (get-buffer \"*dashboard*\")))" "(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook))" "(use-package helm-descbinds
  :defer t
  :bind ((\"C-h b\" . helm-descbinds)
         (\"C-h w\" . helm-descbinds)))" "(use-package helm
  :diminish helm-mode
  :init
  (progn
    (require 'helm-config)
    (setq helm-candidate-number-limit 100)
    ;; From https://gist.github.com/antifuchs/9238468
    (setq helm-idle-delay 0.0 ; update fast sources immediately (doesn't).
          helm-input-idle-delay 0.01  ; this actually updates things
                                        ; reeeelatively quickly.
          helm-yas-display-key-on-candidate t
          helm-quick-update t
          helm-M-x-requires-pattern nil
          helm-ff-skip-boring-files t)
    (helm-mode))
  :bind ((\"C-c h\" . helm-mini)
         (\"C-h a\" . helm-apropos)
         (\"C-x C-b\" . helm-buffers-list)
         (\"C-x b\" . helm-buffers-list)
         (\"M-y\" . helm-show-kill-ring)
         (\"M-x\" . helm-M-x)
         (\"C-x c o\" . helm-occur)
         (\"C-x c s\" . helm-swoop)
         (\"C-x c y\" . helm-yas-complete)
         (\"C-x c Y\" . helm-yas-create-snippet-on-region)
         (\"C-x c b\" . my/helm-do-grep-book-notes)
         (\"C-x c SPC\" . helm-all-mark-rings)))
(ido-mode -1) ;; Turn off ido mode in case I enabled it accidentally"))
(setq search-ring '("pa"))
(setq regexp-search-ring 'nil)
